#!/usr/bin/env python3

import errno
import math
import textwrap

from datetime import datetime
from os import mkdir
from sys import argv
from PIL import Image


def get_colors_from_image(image, x, y, color_depth):
    color = image.getpixel((x, y))
    # Assuming 8-bit channels in source image
    depth_divider = math.pow(2, 8 - color_depth)
    r = int(color[0] // depth_divider)
    g = int(color[1] // depth_divider)
    b = int(color[2] // depth_divider)
    a = int(color[3] // 255)

    final = r
    final = (final << color_depth) + g
    final = (final << color_depth) + b
    final = (final << 1) + a
    return final

def calc_colors(image, coord_depth, color_depth):
    dict = {}
    for y in range(0, image.height):
        for x in range(0, image.width):
            coord = (x << coord_depth) + y
            colors = get_colors_from_image(image, x, y, color_depth)
            dict[coord] = colors
    return dict

def to_hex(num, depth):
    return hex(num).upper()[2:].zfill(int(math.ceil(depth / 4)))

def get_coord_list(dicts):
    key_list = []
    for dict in dicts:
        key_list = key_list + list(dict.keys())
    return key_list

def get_full_color(coordinate, dicts, depth):
    color = 0
    for i in range(0, len(dicts)):
        color += dicts[i].get(coordinate, 0)
        if i < len(dicts) - 1:
            color = color << depth
    return color

def build_mif(dicts, coord_depth, color_depth, full_depth):
    result = []
    coords = get_coord_list(dicts)
    for coordinate in coords:
        result.append("{0}:\t{1};".format(
            to_hex(coordinate, coord_depth),
            to_hex(get_full_color(coordinate, dicts, color_depth * 3 + 1), full_depth)
        ))
    return "\n".join(result)

def output(out_fname, coord_depth, color_depth, offset, dicts):
    file = open(out_fname, 'w')

    entries = build_mif(dicts, coord_depth, color_depth, (color_depth * 3 + 1) * len(dicts) + offset)
    content = textwrap.dedent("""\

-- *** THIS IS AN AUTO-GENERATED FILE ***
WIDTH = {0};
DEPTH = {1};

ADDRESS_RADIX = HEX;
DATA_RADIX    = HEX;

CONTENT
BEGIN
{2}
END;""".format((color_depth * 3 + 1) * len(dicts) + offset, int(math.pow(2, coord_depth) * math.pow(2, coord_depth)), entries))
    file.write(content + "\n")
    file.close()

# =====================
#  PROGRAM ENTRY POINT
# =====================

images = []
color_depth = 0
coord_depth = 0
offset = 0
ofile = 'sprites.mif'

# Read in command line arguments
argv.pop(0)
for arg in argv:
    if arg.startswith('--'):
        option = arg[2:].split('=')[0]
        if option == 'depth':
            value = int(arg[2:].split('=')[1])
            color_depth = value
        elif option == 'xywidth':
            value = int(arg[2:].split('=')[1])
            coord_depth = value
        elif option == 'offset':
            value = int(arg[2:].split('=')[1])
            offset = value
        elif option == 'output':
            value = arg[2:].split('=')[1]
            ofile = value
        else:
            print("Unknown option '{}'.".format(option))
    else:
        images.append(arg)

# Check for all necessary options
if color_depth == 0:
    print('Color depth must not be zero (use --depth=?? option).')
elif coord_depth == 0:
    print('Coordinate bit width must not be zero (use --xywidth=?? option).')
else:
    print("Color depth:  {}".format(color_depth))
    print("Coord. depth: {}".format(coord_depth))
    print("Bit offset:   {}".format(offset))
    print()

    dicts = []
    for fname in images:
        image = Image.open(fname).convert('RGBA')

        print("Image: {} ({} x {})".format(fname, image.width, image.height))

        dicts.append(calc_colors(image, coord_depth, color_depth))

    output(ofile, coord_depth, color_depth, offset, dicts)
